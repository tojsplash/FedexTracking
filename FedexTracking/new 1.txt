import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.concurrent.locks.*;
import java.util.Calendar;
import java.util.Date;

class ReturnTable {

	
	static int row = 0;
	static String[][] city = new String[10000][100];

	public void getDetails() {

		String sql = "";

		try {
			// create our mysql database connection
			String myDriver = "org.gjt.mm.mysql.Driver";
			String myUrl = "jdbc:mysql://localhost/world";
			Class.forName(myDriver);
			Connection conn = DriverManager.getConnection(myUrl, "root", "1415");
			Statement st1 = conn.createStatement();

			
			String sql1 = "SELECT * FROM nodes WHERE 'Lock' = 0 LIMIT 0, 100";


			ResultSet rs = st1.executeQuery(sql1);

			row = 0;
			while (rs.next()) {

				city[row][0] = rs.getString("TrackingID");
				System.out.println(city[row][0]);

				for (int c = 1; c <= 12; c++) {
					
					if (rs.getString("Node" + c) == null) {
						
						break;
					}
					
					if (rs.getString("Node" + c) != null) {
						city[row][c] = rs.getString("Node" + c);
						System.out.println(city[row][c]);
					}
				}

				for (int k = 13, m = 1; k <= 23; k++, m++) {
					
					if (rs.getString("Dist" + m) == null) {
						
						break;
					}	

					if (rs.getString("Dist" + m) != null) {
						city[row][k] = rs.getString("Dist" + m);
						System.out.println(city[row][k]);
					}
				}

				city[row][24] = "0";

				row++;

			}
			conn.close();
		}

		catch (Exception e) {
			System.err.println("Got an exception in Dijstra! ");
			System.err.println(e.getMessage());
		}

	}

}

public class MultithreadingDemo implements Runnable {

	private final Lock lock = new ReentrantLock();
	int dist;

	public void run() {

		System.out.println("My thread is in running state.");

		lock.lock();
		String[] onerow = new String[33];
		try

		{

			for (int row1 = 0; row1 < ReturnTable.row; row1++) {

				if (ReturnTable.city[row1][24].equals("0")) {

					ReturnTable.city[row1][24] = "1";

					for (int col = 0; col < 24; col++) {

						onerow[col] = ReturnTable.city[row1][col];

					}
					
					
					break;

				}

			}

		} finally {
			lock.unlock();
		}
		
		
		 int count = 0;

		for (int k = 13; k <= 23; k++) {

			if (onerow[k] == null) 
				
				break; 
		
			
			else{
				
				double value = Double.parseDouble(onerow[k]);
				dist = (int) value;
				//dist = Integer.parseInt(onerow[k]);
			}

				try

				{
					//Date date = new Date();
					Calendar calendar = Calendar.getInstance(); // gets a calendar using the default time zone and locale.
					
					
					//Thread.sleep(dist*10);
					
					//dist/=100;
					//calendar.add(Calendar.SECOND, dist);
					String time = String.valueOf(calendar.getTime());
					time = ":" + time;
					System.out.println(time);
					
					
					try {
						// create our mysql database connection
						String myDriver = "org.gjt.mm.mysql.Driver";
						String myUrl = "jdbc:mysql://localhost/world";
						Class.forName(myDriver);
						Connection conn = DriverManager.getConnection(myUrl, "root", "1415");
						Statement st1 = conn.createStatement();
						
						
						String[] Nodes = { "Node1", "Node2", "Node3", "Node4", "Node5",
								"Node6", "Node7", "Node8", "Node9", "Node10", "Node11",
								"Node12", "Node13", "Node14", "Node15", "Node16", "Node17",
								"Node18", "Node19", "Node20", "Node21", "Node22", "Node23",
								"Node24", "Node25" };
						
						
						count++ ;
						
						
						time = String.valueOf(calendar.getTime());
						time = ":" + time;
						
                        String sql = "UPDATE nodes SET Node" + count + " = CONCAT(Node" + count + ",'" + time + "') WHERE TrackingID = " + onerow[0] + "";							
						
						st1.executeUpdate(sql);
						
						
						
						Thread.sleep(5000);
						time = String.valueOf(calendar.getTime());
						time = ":" + time;
						
						count++ ;
						
                        sql = "UPDATE nodes SET Node" + count + " = CONCAT(Node" + count + ",'" + time + "') WHERE TrackingID = " + onerow[0] + "";							
						
						st1.executeUpdate(sql);

						conn.close();
					}

					catch (Exception e) {
						System.err.println("Got an exception in Dijstra! ");
						System.err.println(e.getMessage());
					}

					
					
					

				}

				catch (InterruptedException e)

				{

					e.printStackTrace();

				}

			}
		

	}

	public static void main(String args[]) {
		MultithreadingDemo obj = new MultithreadingDemo();
		Thread tobj = new Thread(obj);

		ReturnTable ret = new ReturnTable();
		ret.getDetails();

		tobj.start();
	}

}
